package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"path/filepath"
	"regexp"
	"strings"
	"unicode"
)

const DIR = "svc"

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := fmt.Sprintf("/%s/%s.go", DIR, getFileName(*file.Proto.Name))
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by auxo-service. DO NOT EDIT.")
	g.P("// source: ", *file.Proto.Name)
	g.P()
	g.P("package ", DIR)
	g.P()

	g.P("import (")
	g.P(`"codeup.aliyun.com/wenuts/`, getProjectName(*file.Proto.Name), `/service/biz"`)
	g.P(`"codeup.aliyun.com/wenuts/`, getProjectName(*file.Proto.Name), `/service/contract"`)
	g.P(`"context"`)
	g.P(")")

	for _, svc := range file.Services {
		bizField, bizName := getBizName(svc.GoName)

		g.P("func ", "New", svc.GoName, "(", bizField, " ", bizName, ") contract.", svc.GoName, "{")
		g.P("return &", getEntityName(svc.GoName), "{")
		g.P(bizField, ": ", bizField, ",")
		g.P("}")
		g.P("}")
		g.P()

		g.P("type ", getEntityName(svc.GoName), " struct {")
		g.P(bizField, " ", bizName)
		g.P("}")
		g.P()

		for _, m := range svc.Methods {
			g.P("func (s *", getEntityName(svc.GoName), ")", m.GoName, "(ctx context.Context, req *contract.", m.Input.GoIdent.GoName, ") (*contract.", m.Output.GoIdent.GoName, ", error) {")
			g.P("return s.", bizField, ".", getBizFunName(m.GoName), "(ctx, req)")
			g.P("}")
			g.P()
		}
	}
}

func getFileName(protoName string) string {
	fileName := strings.TrimSuffix(filepath.Base(protoName), filepath.Ext(protoName))
	if names := strings.Split(fileName, "_"); len(names) >= 2 {
		return strings.Join(names[1:], "_")
	}
	return protoName
}

func getProjectName(protoName string) string {
	return strings.ToLower(strings.Split(protoName, "_")[0])
}

func getEntityName(svcName string) string {
	return lowercaseFirstLetter(svcName)
}

func lowercaseFirstLetter(s string) string {
	if len(s) == 0 {
		return s
	}
	runes := []rune(s)
	runes[0] = unicode.ToLower(runes[0])
	return string(runes)
}

func getBizFunName(s string) string {
	re := regexp.MustCompile(`[A-Z][^A-Z]*`)
	parts := re.FindAllString(s, -1)
	if len(parts) > 1 {
		return strings.Join(parts[1:], "")
	}
	return s
}

func getBizName(s string) (string, string) {
	field := lowercaseFirstLetter(string(s[0])) + "b"
	suffix := "Service"
	if strings.HasSuffix(s, suffix) {
		return field, "biz." + strings.TrimSuffix(s, suffix) + "Biz"
	}
	return field, "biz." + s + "Biz"
}
